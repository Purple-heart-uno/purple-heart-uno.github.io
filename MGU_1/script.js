    await waitForDatabase();
    
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.getElementById(sectionId).classList.add('active');
    document.querySelector(`.tab[onclick="showSection('${sectionId}')"]`).classList.add('active');
    
    if (sectionId === 'database') {
        displayFilmsList();
    } else if (sectionId === 'admin') {
        renderAttributesGrid();
        updateStats();
    }
}

function startGame() {
    akinator.current_answers = {};
    questionsCount = 0;
    document.getElementById('gameControls').style.display = 'none';
    document.getElementById('answers').style.display = 'grid';
    document.getElementById('result').style.display = 'none';
    document.getElementById('progressBar').style.width = '0%';
    showQuestion();
}

function showQuestion() {
    currentQuestion = akinator.choose_best_question();
    
    if (!currentQuestion) {
        endGame();
        return;
    }
    
    let questionText = currentQuestion;
    if (questionText.includes('_')) {
        const parts = questionText.split('_');
        const mainPart = parts[0];
        const valuePart = parts.slice(1).join(' ');
        
        switch(mainPart) {
            case '—Å—Ç—Ä–∞–Ω–∞':
                questionText = `–§–∏–ª—å–º —Å–Ω—è—Ç –≤ ${valuePart}?`;
                break;
            case '–≥–æ–¥':
                questionText = `–§–∏–ª—å–º –≤—ã—à–µ–ª –≤ ${valuePart} –≥–æ–¥—É?`;
                break;
            case '–∂–∞–Ω—Ä':
                questionText = `–≠—Ç–æ —Ñ–∏–ª—å–º –≤ –∂–∞–Ω—Ä–µ ${valuePart}?`;
                break;
            case '—Ä–µ–∂–∏—Å—Å–µ—Ä':
                questionText = `–§–∏–ª—å–º —Å–Ω—è–ª ${valuePart}?`;
                break;
            case '–∞–∫—Ç–µ—Ä':
                questionText = `–í –≥–ª–∞–≤–Ω–æ–π —Ä–æ–ª–∏ ${valuePart}?`;
                break;
            case '–∫–æ–º–ø–∞–Ω–∏—è':
                questionText = `–§–∏–ª—å–º –≤—ã–ø—É—Å—Ç–∏–ª–∞ –∫–æ–º–ø–∞–Ω–∏—è ${valuePart}?`;
                break;
            default:
                questionText = `–§–∏–ª—å–º —Å–≤—è–∑–∞–Ω —Å "${questionText.replace(/_/g, ' ')}"?`;
        }
    } else {
        questionText = `–§–∏–ª—å–º —Å–≤—è–∑–∞–Ω —Å "${questionText}"?`;
    }
    
    document.getElementById('questionText').textContent = questionText;
    console.log('–ó–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å:', currentQuestion, '–û—Ç–≤–µ—Ç–æ–≤:', Object.keys(akinator.current_answers).length);
}

function answerQuestion(answer) {
    if (!currentQuestion) return;
    
    questionsCount++;
    const progress = Math.min((questionsCount / 20) * 100, 100);
    document.getElementById('progressBar').style.width = progress + '%';
    
    akinator.current_answers[currentQuestion] = akinator.possible_answers[answer];
    console.log('–û—Ç–≤–µ—Ç:', answer, '–Ω–∞ –≤–æ–ø—Ä–æ—Å:', currentQuestion);
    
    if (akinator.shouldMakeGuess()) {
        const candidates = akinator.filter_films();
        const bestCandidate = candidates[0];
        
        if (bestCandidate && bestCandidate.match_score > 0.6) {
            showGuess(bestCandidate.title);
        } else {
            showFilmOptions(candidates);
        }
    } else if (questionsCount >= 20) {
        const candidates = akinator.filter_films();
        showFilmOptions(candidates);
    } else {
        showQuestion();
    }
}

function showGuess(filmTitle) {
    document.getElementById('guessResult').innerHTML = 
        `<h3>üéâ –Ø –¥—É–º–∞—é, —ç—Ç–æ: ${filmTitle}</h3>
         <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${Math.round(akinator.filter_films()[0].match_score * 100)}%</p>`;
    document.getElementById('guessButtons').style.display = 'block';
    document.getElementById('filmOptions').style.display = 'none';
    document.getElementById('result').style.display = 'block';
    document.getElementById('answers').style.display = 'none';
}

function showFilmOptions(candidates) {
    const topCandidates = akinator.getTopCandidates();
    
    if (topCandidates.length === 0) {
        document.getElementById('guessResult').innerHTML = 
            '<h3>üòî –ù–µ –º–æ–≥—É —É–≥–∞–¥–∞—Ç—å —Ñ–∏–ª—å–º. –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã.</h3>';
        document.getElementById('filmOptions').style.display = 'none';
        document.getElementById('guessButtons').style.display = 'none';
    } else {
        document.getElementById('guessResult').innerHTML = 
            '<h3>üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</h3>';
        
        const filmList = document.getElementById('filmList');
        filmList.innerHTML = '';
        
        topCandidates.forEach(film => {
            const li = document.createElement('li');
            li.className = 'film-item';
            li.innerHTML = `
                <strong>${film.title}</strong>
                <br><small>–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${Math.round(film.match_score * 100)}%</small>
            `;
            li.onclick = () => confirmFilmGuess(film.title);
            filmList.appendChild(li);
        });
        
        document.getElementById('filmOptions').style.display = 'block';
        document.getElementById('guessButtons').style.display = 'none';
    }
    
    document.getElementById('result').style.display = 'block';
    document.getElementById('answers').style.display = 'none';
}

function confirmFilmGuess(filmTitle) {
    document.getElementById('guessResult').innerHTML = 
        `<h3>üéâ –û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ ${filmTitle}</h3>`;
    document.getElementById('filmOptions').style.display = 'none';
    
    setTimeout(() => {
        if (confirm('–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?')) {
            startGame();
        }
    }, 1000);
}

function continueGame() {
    document.getElementById('result').style.display = 'none';
    document.getElementById('answers').style.display = 'grid';
    showQuestion();
}

function confirmGuess(isCorrect) {
    if (isCorrect) {
        document.getElementById('guessResult').innerHTML = 
            '<h3>üéâ –£—Ä–∞! –Ø —É–≥–∞–¥–∞–ª!</h3>';
        setTimeout(() => {
            if (confirm('–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?')) {
                startGame();
            }
        }, 1000);
    } else {
        document.getElementById('guessResult').innerHTML = 
            '<h3>üòî –ù–µ —É–≥–∞–¥–∞–ª. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ!</h3>';
        setTimeout(() => {
            continueGame();
        }, 1500);
    }
}

function endGame() {
    document.getElementById('questionText').textContent = '–ù–µ –º–æ–≥—É —É–≥–∞–¥–∞—Ç—å —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É!';
    document.getElementById('answers').style.display = 'none';
    document.getElementById('gameControls').style.display = 'block';
    document.getElementById('result').style.display = 'none';
}

function resetGame() {
    akinator.current_answers = {};
    document.getElementById('gameControls').style.display = 'block';
    document.getElementById('answers').style.display = 'none';
    document.getElementById('result').style.display = 'none';
    document.getElementById('questionText').textContent = '–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É? –ó–∞–≥–∞–¥–∞–π—Ç–µ —Ñ–∏–ª—å–º, –∞ —è –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!';
}

async function renderAttributesGrid() {
    await waitForDatabase();
    
    const grid = document.getElementById('attributesGrid');
    const loading = document.getElementById('loadingAttributes');
    
    if (akinator.attributes.size === 0) {
        loading.innerHTML = '–ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º!';
        return;
    }
    
    loading.style.display = 'none';
    grid.style.display = 'grid';
    grid.innerHTML = '';
    
    const allAttributes = akinator.get_all_attributes();
    
    allAttributes.forEach(attr => {
        const div = document.createElement('div');
        div.className = 'attribute-item';
        div.textContent = attr.replace(/_/g, ' ');
        div.onclick = () => toggleAttribute(attr, div);
        
        if (selectedAttributes.has(attr)) {
            div.classList.add('selected');
        }
        
        grid.appendChild(div);
    });
}

function toggleAttribute(attr, element) {
    if (selectedAttributes.has(attr)) {
        selectedAttributes.delete(attr);
        element.classList.remove('selected');
    } else {
        selectedAttributes.add(attr);
        element.classList.add('selected');
    }
}

function addNewAttribute() {
    const newAttrInput = document.getElementById('newAttribute');
    const newAttr = newAttrInput.value.trim();
    
    if (!newAttr) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞!');
        return;
    }
    
    const formattedAttr = newAttr.replace(/\s+/g, '_');
    
    if (!selectedAttributes.has(formattedAttr)) {
        selectedAttributes.add(formattedAttr);
        renderAttributesGrid();
        newAttrInput.value = '';
    }
}

async function addFilmToDatabase() {
    await waitForDatabase();
    
    const titleInput = document.getElementById('newFilmTitle');
    const title = titleInput.value.trim();
    const statusDiv = document.getElementById('addFilmStatus');
    
    if (!title) {
        statusDiv.innerHTML = '<span style="color: var(--danger);">–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞!</span>';
        return;
    }
    
    if (selectedAttributes.size === 0) {
        statusDiv.innerHTML = '<span style="color: var(--danger);">–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞—Ç—Ä–∏–±—É—Ç!</span>';
        return;
    }
    
    statusDiv.innerHTML = '<span style="color: var(--secondary);">–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º...</span>';
    
    try {
        const success = await akinator.addFilm(title, Array.from(selectedAttributes));
        
        if (success) {
            statusDiv.innerHTML = `<span style="color: var(--success);">–§–∏–ª—å–º "${title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</span>`;
            titleInput.value = '';
            selectedAttributes.clear();
            renderAttributesGrid();
            updateStats();
            
            setTimeout(() => {
                statusDiv.innerHTML = '';
            }, 3000);
        } else {
            statusDiv.innerHTML = '<span style="color: var(--danger);">–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞!</span>';
        }
    } catch (error) {
        statusDiv.innerHTML = '<span style="color: var(--danger);">–û—à–∏–±–∫–∞: ' + error.message + '</span>';
    }
}

function updateStats() {
    document.getElementById('filmsCount').textContent = akinator.database.length;
    document.getElementById('attributesCount').textContent = akinator.attributes.size;
}

async function displayFilmsList() {
    await waitForDatabase();
    
    const list = document.getElementById('filmsList');
    const loading = document.getElementById('loadingFilms');
    
    if (akinator.database.length === 0) {
        loading.innerHTML = '–ë–∞–∑–∞ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º!';
        return;
    }
    
    loading.style.display = 'none';
    list.style.display = 'block';
    list.innerHTML = '';
    
    akinator.database.forEach((film, index) => {
        const li = document.createElement('li');
        li.className = 'film-item';
        
        const filmInfo = document.createElement('div');
        filmInfo.innerHTML = `
            <strong>${film.title}</strong>
            <br><small>–ê—Ç—Ä–∏–±—É—Ç–æ–≤: ${Object.keys(film.attributes).length}</small>
        `;
        
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'btn btn-danger';
        deleteBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
        deleteBtn.style.marginLeft = '10px';
        deleteBtn.onclick = (e) => {
            e.stopPropagation();
            if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º "${film.title}"?`)) {
                akinator.deleteFilm(index);
                displayFilmsList();
            }
        };
        
        li.appendChild(filmInfo);
        li.appendChild(deleteBtn);
        list.appendChild(li);
    });
}

function searchFilms() {
    const searchTerm = document.getElementById('searchFilm').value.toLowerCase();
    const items = document.querySelectorAll('.film-item');
    
    items.forEach(item => {
        const filmName = item.querySelector('strong').textContent.toLowerCase();
        if (filmName.includes(searchTerm)) {
            item.style.display = 'flex';
        } else {
            item.style.display = 'none';
        }
    });
}

function exportDatabase() {
    const dataStr = JSON.stringify(akinator.database, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = 'films_database.json';
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
}

function downloadDatabase() {
    const data = {
        database: akinator.database,
        lastUpdated: new Date().toISOString()
    };
    
    const dataStr = JSON.stringify(data, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = 'films_database_full.json';
    a.click();
    
    URL.revokeObjectURL(url);
}

function importDatabase() {
    const fileInput = document.getElementById('importFile');
    const file = fileInput.files[0];
    
    if (!file) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞!');
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const data = JSON.parse(e.target.result);
            if (Array.isArray(data)) {
                akinator.database = data;
            } else if (data.database) {
                akinator.database = data.database;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            }
            
            akinator.saveToLocalStorage();
            akinator.updateAttributes();
            alert('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!');
            fileInput.value = '';
            updateStats();
            displayFilmsList();
            renderAttributesGrid();
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ' + error.message);
        }
    };
    reader.readAsText(file);
}

function resetDatabase() {
    if (confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? –í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
        akinator.loadDefaultDatabase();
        updateStats();
        displayFilmsList();
        renderAttributesGrid();
        alert('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async function() {
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    
    document.getElementById('loadingAttributes').style.display = 'block';
    document.getElementById('attributesGrid').style.display = 'none';
    document.getElementById('loadingFilms').style.display = 'block';
    document.getElementById('filmsList').style.display = 'none';
    
    await waitForDatabase();
    
    console.log('–ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
    updateStats();
    renderAttributesGrid();
    displayFilmsList();
    
    document.getElementById('loadingAttributes').style.display = 'none';
    document.getElementById('attributesGrid').style.display = 'grid';
});
